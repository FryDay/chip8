package chip8

type Chip8 struct {
	Opcode     uint16
	Memory     [4096]byte
	V          [16]byte
	I          uint16
	PC         uint16
	DelayTimer byte
	SoundTimer byte
	Stack      [16]uint16
	SP         uint16
	Key        [16]byte
}

var font = [80]byte{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

func (c *Chip8) Initialize() {
	c.PC = 0x200
	//opcode
	c.I = 0
	c.SP = 0

	//clear display
	//clear Stack
	//clear registers V0-VF
	//clear memory

	// Load fontset
	for i := 0; i < 80; i++ {
		c.Memory[i] = font[i]
	}
}

func (c *Chip8) Cycle() {
	// Fetch opcode
	start := uint16(c.Memory[c.PC])
	start = start << 8
	c.Opcode = uint16(start | uint16(c.Memory[c.PC+1]))
	//decode opcode
	//execute opcode
	//update timers
}
